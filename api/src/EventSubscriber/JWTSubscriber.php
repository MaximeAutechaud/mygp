<?php

namespace App\EventSubscriber;

use App\Entity\User;
use Doctrine\ORM\EntityManagerInterface;
use Lexik\Bundle\JWTAuthenticationBundle\Event\AuthenticationSuccessEvent;
use Lexik\Bundle\JWTAuthenticationBundle\Event\JWTCreatedEvent;
use Psr\Log\LoggerInterface;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;

class JWTSubscriber implements EventSubscriberInterface
{
    public function __construct(
        private readonly EntityManagerInterface $em,
        private LoggerInterface $logger
    ) {}

    public static function getSubscribedEvents(): array
    {
        return [
            // DÃ©clenchÃ© quand un token est gÃ©nÃ©rÃ© avec succÃ¨s (login rÃ©ussi)
            AuthenticationSuccessEvent::class => 'onAuthenticationSuccess',

            // DÃ©clenchÃ© juste avant la crÃ©ation du token JWT
            JWTCreatedEvent::class => 'onJWTCreated',
        ];
    }

    public function onAuthenticationSuccess(AuthenticationSuccessEvent $event): void
    {
        $this->logger->info('âœ… JWTSubscriber dÃ©clenchÃ© !');
        $user = $event->getUser();

        if (!$user instanceof User) {
            return;
        }

        // Met Ã  jour la date de derniÃ¨re connexion
        $user->setLastConnection(new \DateTimeImmutable());
        $this->em->persist($user);
        $this->em->flush();
    }

    public function onJWTCreated(JWTCreatedEvent $event): void
    {
        $user = $event->getUser();

        if (!$user instanceof User) {
            return;
        }

        // Log pour vÃ©rifier
        $this->logger->info('ðŸ”¥ JWTCreated dÃ©clenchÃ© pour '.$user->getEmail());

        $user->setLastConnection(new \DateTimeImmutable());
        $this->em->flush();
    }
}
